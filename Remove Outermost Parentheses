Remove Outermost Parentheses
Problem Statement: A valid parentheses string is defined by the following rules:

It is the empty string "".
If A is a valid parentheses string, then so is "(" + A + ")".
If A and B are valid parentheses strings, then A + B is also valid.

A primitive valid parentheses string is a non-empty valid string that cannot be split into two or more non-empty valid parentheses strings.

Given a valid parentheses string s, your task is to remove the outermost parentheses from every primitive component of s and return the resulting string.
Examples
Example 1:
Input: s = "((()))"
Output: "(())"
Explanation: The input string is a single primitive: "((()))".  
Removing the outermost layer yields: "(())".

Example 2:
Input: s = "()(()())(())"
Output: "(()())()"
Explanation: Primitive decomposition: "()" + "(()())" + "(())"  
After removing outermost parentheses: "" + "()()" + "()"
Final result: "(()())()".
---------------------------------------------------------------------------
class Solution {
    public String removeOuterParentheses(String s) {
        StringBuilder sb = new StringBuilder();
        int level = 0;
        for (char c : s.toCharArray()) {
            if (c == '(') {
                if (level > 0) {
                    sb.append(c);
                }
                level++;
            } else if (c == ')') {
                level--;
                if (level > 0) {
                    sb.append(c);
                }
            }
        }
        return sb.toString();
    }
}
---------------------------------------------------------------------
Input: ())

Initialize: level = 0, result = ""

Step 1: '('

level == 0, so don’t append (outer)

Increment level → 1

result = ""

Step 2: ')'

Decrement level → 0

level == 0, so don’t append (outer closing)

result = ""

Step 3: ')'

Decrement level → -1

level <= 0, so don’t append

result = ""
